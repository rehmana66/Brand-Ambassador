5213lor8ffaqd9b2pifkj2m53n

Rehmana6@mymacewan.ca

ID: 
user: e407a0fe-e1d6-4ce2-a391-549d318ffee0

location: 8104588e-baa5-4f7b-bb37-a9880e34f530

event_id: "8e20e28e-5dbf-4092-a88d-6888697009b6"

user_eventID: "d2c5694e-7e53-4cb9-adc7-ee7110d80cdf"

#TODO: change employer_id to connect to USER table


User -> Location: One to one relationship
    - user can have only have one location and resume at a time
    IDs:
    - id to update location in user: userLocationId
    - id to update resume in user: userResumeId

        type User @model {
            id: ID!
            firstName: String
            lastname: String
            phone_number: AWSPhone
            user_type: Boolean
            email: AWSEmail
            location: Location @connection
            resume: Resume @connection
        }

        type Location @model {
            id: ID!
            city: String
            country: String
            isoCountryCode: String
            postalCode: String
            region: String
            street: String
        }
        type Resume @model {
            id: ID!
            resume: String
        }

User -> UserEvents -> Events: Many to many relationship
    - user can have multiple Events
    - events can have multiple users

    IDs: willchange
    userEventsEmployeeId: the user id
    userEventsEventId: the event id

        type User @model {
            id: ID!
            firstName: String
            lastname: String
            phone_number: AWSPhone
            user_type: Boolean
            email: AWSEmail
            location: Location @connection
            resume: Resume @connection
            events: [UserEvents] @connection(name: "userEmployee")*-->
        }
        --->
        type UserEvents @model (queries: null){
            id: ID!
            employee: User @connection(name: "userEmployee")
            event: Event @connection(name: "eventEmployees")
        }
        <---
        type Event @model {
            id: ID!
            employer_id: String
            name: String
        <--*employees: [UserEvents] @connection(name: "eventEmployees")
        }


type Details @model {
  id: ID!
  title: String
  desc: String
  misc: String
  rate: String
  location: Location @connection
  category: [Category] @connection(name: "jobcategory")
  dates: [JobDates] @connection(name: "jobdate")
}

type JobDates @model {
  id: ID!
  date: AWSDateTime
  con: Details @connection(name: "jobdate")
}

type Category @model {
  id: ID!
  name: String
  conn: Details @connection(name: "jobcategory")