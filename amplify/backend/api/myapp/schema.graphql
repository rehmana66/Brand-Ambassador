type User @model {
  id: ID!
  firstName: String
  lastname: String
  phone_number: AWSPhone
  user_type: Boolean
  email: AWSEmail
  dateOfBirth: AWSDate
  location: Location @connection
  resume: Resume @connection
  jobs: [UserJobs] @connection(name: "userjobs")
  shifts: [UserShifts] @connection(name: "usershifts")
  apply: [Application] @connection(name: "userApplications")
}

type Location @model {
  id: ID!
  city: String
  country: String
  isoCountryCode: String
  postalCode: String
  region: String
  street: String
}

type Resume @model {
  id: ID!
  resume_key: String
}

type UserJobs @model (queries: null){
  id: ID!
  userID: User @connection(name: "userjobs")
  jobID: Job @connection(name: "employees")
}

type Job @model {
  id: ID!
  employer_id: String
  name: String
  employees: [UserJobs] @connection(name: "employees")
  applications: [Application] @connection(name: "jobApplications")
}

type Application @model {
  id: ID!
  status: Boolean
  userID: User @connection(name: "userApplications")
  jobID: Job @connection(name: "jobApplications")
}

type UserShifts @model (queries: null) {
  id: ID!
  userID: User @connection(name: "usershifts")
  shiftID: Shift @connection(name: "shifts")
}

type Shift @model {
  id: ID!
  title: String
  desc: String
  misc: String
  rate: String
  test: [UserShifts] @connection(name: "shifts")
}